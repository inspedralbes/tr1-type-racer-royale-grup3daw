version: '3.8'

# Este fichero docker-compose está configurado para el entorno de producción.
# Construye imágenes optimizadas, no expone puertos de bases de datos al exterior
# y ejecuta los servicios en modo de producción para eficiencia y seguridad.
#
# Para levantar este entorno, usa el comando: docker compose -f docker-compose.prod.yml up --build -d
services:
  nginx:
    build:
      context: .
      dockerfile: nginx.Dockerfile
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - app-network

  backend:
    build: ./backend
    command: npm run start:prod # Comando para iniciar en producción
    # Carga las variables de entorno desde un fichero .env que se creará en producción
    env_file: ./backend/.env
    environment:
      - DB_HOST=mysql
    depends_on:
      mongo:
        condition: service_started
      mysql:
        condition: service_healthy
    networks:
      - app-network

  mongo:
    image: mongo:latest
    volumes:
      - mongo-data:/data/db
    networks:
      - app-network

  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mysql_root_password
      MYSQL_DATABASE: db_prod
      MYSQL_USER: user_prod # Considera también usar secrets para el usuario
      MYSQL_PASSWORD_FILE: /run/secrets/mysql_password
    volumes:
      - mysql-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mongo-data:
  mysql-data:

secrets:
  mysql_root_password:
    file: ./mysql_root_password.txt
  mysql_password:
    file: ./mysql_password.txt