# Este fichero docker-compose está configurado para el entorno de producción.
services:
  nginx:
    build:
      context: .
      dockerfile: nginx.Dockerfile
    ports:
      - "80:80"
    depends_on:
      - backend
      - frontend
    networks:
      - app-network

  backend:
    build: ./backend
    command: npm start
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${PORT}
      - FRONTEND_URL=${FRONTEND_URL}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MONGO_URI=${MONGO_URI}
    depends_on:
      - mongo
      - mysql
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - VITE_NODE_ENV=${VITE_NODE_ENV}
      - VITE_API_URL=${VITE_API_URL}
      - VITE_SOCKET_URL=${VITE_SOCKET_URL}
    networks:
      - app-network

  mongo:
    image: mongo:latest
    volumes:
      - mongo-data:/data/db
    networks:
      - app-network

  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql-data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mongo-data:
  mysql-data:
